// Generated by gencpp from file persons_msgs/FaceInfo.msg
// DO NOT EDIT!


#ifndef PERSONS_MSGS_MESSAGE_FACEINFO_H
#define PERSONS_MSGS_MESSAGE_FACEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <persons_msgs/Rotation.h>
#include <persons_msgs/FaceProp.h>

namespace persons_msgs
{
template <class ContainerAllocator>
struct FaceInfo_
{
  typedef FaceInfo_<ContainerAllocator> Type;

  FaceInfo_()
    : is_tracked(false)
    , rotation()
    , propertie()  {
    }
  FaceInfo_(const ContainerAllocator& _alloc)
    : is_tracked(false)
    , rotation(_alloc)
    , propertie(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_tracked_type;
  _is_tracked_type is_tracked;

   typedef  ::persons_msgs::Rotation_<ContainerAllocator>  _rotation_type;
  _rotation_type rotation;

   typedef  ::persons_msgs::FaceProp_<ContainerAllocator>  _propertie_type;
  _propertie_type propertie;




  typedef boost::shared_ptr< ::persons_msgs::FaceInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::persons_msgs::FaceInfo_<ContainerAllocator> const> ConstPtr;

}; // struct FaceInfo_

typedef ::persons_msgs::FaceInfo_<std::allocator<void> > FaceInfo;

typedef boost::shared_ptr< ::persons_msgs::FaceInfo > FaceInfoPtr;
typedef boost::shared_ptr< ::persons_msgs::FaceInfo const> FaceInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::persons_msgs::FaceInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::persons_msgs::FaceInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace persons_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'persons_msgs': ['/home/uema/catkin_ws/src/persons_msgs/msg', '/home/uema/catkin_ws/src/persons_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::persons_msgs::FaceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::persons_msgs::FaceInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::persons_msgs::FaceInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::persons_msgs::FaceInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::persons_msgs::FaceInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::persons_msgs::FaceInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::persons_msgs::FaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9e2162eda93f4a728829ff0e1bf916f";
  }

  static const char* value(const ::persons_msgs::FaceInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9e2162eda93f4a7ULL;
  static const uint64_t static_value2 = 0x28829ff0e1bf916fULL;
};

template<class ContainerAllocator>
struct DataType< ::persons_msgs::FaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "persons_msgs/FaceInfo";
  }

  static const char* value(const ::persons_msgs::FaceInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::persons_msgs::FaceInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_tracked\n\
persons_msgs/Rotation rotation\n\
persons_msgs/FaceProp propertie\n\
\n\
================================================================================\n\
MSG: persons_msgs/Rotation\n\
float64 r\n\
float64 p\n\
float64 y\n\
\n\
================================================================================\n\
MSG: persons_msgs/FaceProp\n\
string happy\n\
string engaged\n\
string wearing_glasses\n\
string right_eye_closed\n\
string left_eye_closed\n\
string mouth_open\n\
string mouth_moved\n\
string looking_away\n\
";
  }

  static const char* value(const ::persons_msgs::FaceInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::persons_msgs::FaceInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_tracked);
      stream.next(m.rotation);
      stream.next(m.propertie);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FaceInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::persons_msgs::FaceInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::persons_msgs::FaceInfo_<ContainerAllocator>& v)
  {
    s << indent << "is_tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_tracked);
    s << indent << "rotation: ";
    s << std::endl;
    Printer< ::persons_msgs::Rotation_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
    s << indent << "propertie: ";
    s << std::endl;
    Printer< ::persons_msgs::FaceProp_<ContainerAllocator> >::stream(s, indent + "  ", v.propertie);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERSONS_MSGS_MESSAGE_FACEINFO_H
