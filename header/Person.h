// Generated by gencpp from file persons_msgs/Person.msg
// DO NOT EDIT!


#ifndef PERSONS_MSGS_MESSAGE_PERSON_H
#define PERSONS_MSGS_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <persons_msgs/Body.h>

namespace persons_msgs
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : header()
    , bodys()  {
    }
  Person_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , bodys(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::persons_msgs::Body_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::persons_msgs::Body_<ContainerAllocator> >::other >  _bodys_type;
  _bodys_type bodys;




  typedef boost::shared_ptr< ::persons_msgs::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::persons_msgs::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::persons_msgs::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::persons_msgs::Person > PersonPtr;
typedef boost::shared_ptr< ::persons_msgs::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::persons_msgs::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::persons_msgs::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace persons_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'persons_msgs': ['/home/uema/catkin_ws/src/persons_msgs/msg', '/home/uema/catkin_ws/src/persons_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::persons_msgs::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::persons_msgs::Person_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::persons_msgs::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::persons_msgs::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::persons_msgs::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::persons_msgs::Person_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::persons_msgs::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13ff421063c7d6a1f319d7c89db3f6bb";
  }

  static const char* value(const ::persons_msgs::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13ff421063c7d6a1ULL;
  static const uint64_t static_value2 = 0xf319d7c89db3f6bbULL;
};

template<class ContainerAllocator>
struct DataType< ::persons_msgs::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "persons_msgs/Person";
  }

  static const char* value(const ::persons_msgs::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::persons_msgs::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
persons_msgs/Body[] bodys\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: persons_msgs/Body\n\
int64 tracking_id\n\
bool is_tracked\n\
bool is_speaked\n\
float64 left_hand_state\n\
float64 right_hand_state\n\
persons_msgs/Joint[] joints \n\
persons_msgs/FaceInfo face_info\n\
\n\
================================================================================\n\
MSG: persons_msgs/Joint\n\
string joint_name\n\
float64 tracking_state\n\
geometry_msgs/Point position_color_space\n\
geometry_msgs/Point position\n\
geometry_msgs/Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: persons_msgs/FaceInfo\n\
bool is_tracked\n\
persons_msgs/Rotation rotation\n\
persons_msgs/FaceProp propertie\n\
\n\
================================================================================\n\
MSG: persons_msgs/Rotation\n\
float64 r\n\
float64 p\n\
float64 y\n\
\n\
================================================================================\n\
MSG: persons_msgs/FaceProp\n\
string happy\n\
string engaged\n\
string wearing_glasses\n\
string right_eye_closed\n\
string left_eye_closed\n\
string mouth_open\n\
string mouth_moved\n\
string looking_away\n\
";
  }

  static const char* value(const ::persons_msgs::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::persons_msgs::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.bodys);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::persons_msgs::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::persons_msgs::Person_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "bodys[]" << std::endl;
    for (size_t i = 0; i < v.bodys.size(); ++i)
    {
      s << indent << "  bodys[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::persons_msgs::Body_<ContainerAllocator> >::stream(s, indent + "    ", v.bodys[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERSONS_MSGS_MESSAGE_PERSON_H
