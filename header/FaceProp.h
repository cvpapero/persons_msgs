// Generated by gencpp from file persons_msgs/FaceProp.msg
// DO NOT EDIT!


#ifndef PERSONS_MSGS_MESSAGE_FACEPROP_H
#define PERSONS_MSGS_MESSAGE_FACEPROP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace persons_msgs
{
template <class ContainerAllocator>
struct FaceProp_
{
  typedef FaceProp_<ContainerAllocator> Type;

  FaceProp_()
    : happy()
    , engaged()
    , wearing_glasses()
    , right_eye_closed()
    , left_eye_closed()
    , mouth_open()
    , mouth_moved()
    , looking_away()  {
    }
  FaceProp_(const ContainerAllocator& _alloc)
    : happy(_alloc)
    , engaged(_alloc)
    , wearing_glasses(_alloc)
    , right_eye_closed(_alloc)
    , left_eye_closed(_alloc)
    , mouth_open(_alloc)
    , mouth_moved(_alloc)
    , looking_away(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _happy_type;
  _happy_type happy;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _engaged_type;
  _engaged_type engaged;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _wearing_glasses_type;
  _wearing_glasses_type wearing_glasses;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _right_eye_closed_type;
  _right_eye_closed_type right_eye_closed;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _left_eye_closed_type;
  _left_eye_closed_type left_eye_closed;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mouth_open_type;
  _mouth_open_type mouth_open;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mouth_moved_type;
  _mouth_moved_type mouth_moved;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _looking_away_type;
  _looking_away_type looking_away;




  typedef boost::shared_ptr< ::persons_msgs::FaceProp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::persons_msgs::FaceProp_<ContainerAllocator> const> ConstPtr;

}; // struct FaceProp_

typedef ::persons_msgs::FaceProp_<std::allocator<void> > FaceProp;

typedef boost::shared_ptr< ::persons_msgs::FaceProp > FacePropPtr;
typedef boost::shared_ptr< ::persons_msgs::FaceProp const> FacePropConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::persons_msgs::FaceProp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::persons_msgs::FaceProp_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace persons_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'persons_msgs': ['/home/uema/catkin_ws/src/persons_msgs/msg', '/home/uema/catkin_ws/src/persons_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::persons_msgs::FaceProp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::persons_msgs::FaceProp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::persons_msgs::FaceProp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::persons_msgs::FaceProp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::persons_msgs::FaceProp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::persons_msgs::FaceProp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::persons_msgs::FaceProp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c23231c68b0f0b8b05ed00014ba36ee3";
  }

  static const char* value(const ::persons_msgs::FaceProp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc23231c68b0f0b8bULL;
  static const uint64_t static_value2 = 0x05ed00014ba36ee3ULL;
};

template<class ContainerAllocator>
struct DataType< ::persons_msgs::FaceProp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "persons_msgs/FaceProp";
  }

  static const char* value(const ::persons_msgs::FaceProp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::persons_msgs::FaceProp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string happy\n\
string engaged\n\
string wearing_glasses\n\
string right_eye_closed\n\
string left_eye_closed\n\
string mouth_open\n\
string mouth_moved\n\
string looking_away\n\
";
  }

  static const char* value(const ::persons_msgs::FaceProp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::persons_msgs::FaceProp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.happy);
      stream.next(m.engaged);
      stream.next(m.wearing_glasses);
      stream.next(m.right_eye_closed);
      stream.next(m.left_eye_closed);
      stream.next(m.mouth_open);
      stream.next(m.mouth_moved);
      stream.next(m.looking_away);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FaceProp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::persons_msgs::FaceProp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::persons_msgs::FaceProp_<ContainerAllocator>& v)
  {
    s << indent << "happy: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.happy);
    s << indent << "engaged: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.engaged);
    s << indent << "wearing_glasses: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.wearing_glasses);
    s << indent << "right_eye_closed: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.right_eye_closed);
    s << indent << "left_eye_closed: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.left_eye_closed);
    s << indent << "mouth_open: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mouth_open);
    s << indent << "mouth_moved: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mouth_moved);
    s << indent << "looking_away: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.looking_away);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERSONS_MSGS_MESSAGE_FACEPROP_H
